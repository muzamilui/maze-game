const {Engine,Render,Runner,World,Bodies,MouseConstraint,Mouse}=Matter;
//Create a canvas
const width=600;

const height=600;

const cells=3;
const unitLength =  width / cells;
const engine=Engine.create();
const {world}= engine;
const render =Render.create({
    element:document.body,
    engine:engine,
    options:{
        wireframes:true,
        width,
        height
    }
});

Render.run(render);
Runner.run(Runner.create(),engine);
//Walls
const walls=[
    Bodies.rectangle(width / 2,0,width,40,{
        isStatic:true
    }),
    Bodies.rectangle(width / 2,height ,width,40,{isStatic:true}),
    Bodies.rectangle(0,height / 2,40,height,{isStatic:true}),
        Bodies.rectangle(width,height / 2,40,height,{isStatic:true})
    
]
World.add(world,walls)

//Maze generation
const shuffle=(arr)=>{
let counter =arr.length;
while(counter > 0){
    const index =Math.floor(Math.random() * counter);
     counter-- 
     const temp =arr[counter];
     arr[counter = arr[index]];
     arr[index]= temp
}
return arr;
}
const grid = Array(cells).fill(null).map(()=>Array(cells).fill(false))

const verticals = Array(cells).fill(null).map(()=>Array(cells-1).fill(false));

const horizontal = Array(cells-1).fill(null).map(()=>Array(cells).fill(false));

const startRow = Math.floor(Math.random()*cells)

const startColumn = Math.floor(Math.random()*cells)

const itterateMaze = (row,column)=>{
    // if user visited the cell at[row,column] then return
    if(grid[row][column]){
        return
    }

    //Mark this cell as being visited
grid[row][column]=true;
    //Assemble randomly-orderder list of neighbors
    const neighbors= shuffle([
        [row - 1,column, 'up'],
        [row,column + 1,'right'],
        [row + 1,column,'down'],
        [row,column - 1, 'left']
    ]);

    //For each neighbor.....
    for(let neighbor of neighbors){
        const [nextRow,nextCoulmn, direction] = neighbor;

    //see if that neigbhor is out of bound
        if(nextRow < 0 || nextRow >= cells||nextCoulmn < 0 || nextCoulmn >= cells){
            continue;
        }
        //if we have visisted that neigbhor , continue to next neighbor
        if(grid[nextRow][nextCoulmn]){
            continue;
        }
         //remove a wall from either  ver/hor array
         if (direction === 'left'){
             verticals[row][column - 1] = true;
         } else if(direction === 'right'){
             verticals[row][column]= true;
         }else if( direction === 'up'){
             horizontal[row - 1][column] = true
         }else if (direction === 'down'){
             horizontal[row][column]=true;
         }
        }


};

itterateMaze(startRow,startColumn)

horizontal.forEach((row,rowIndex)=>{
row.forEach((open,columnIndex)=>{
    if(open){
        return;
    }
    const wall = Bodies.rectangle(columnIndex * unitLength + unitLength / 2, rowIndex * unitLength * unitLength,unitLength,10,{
        isStatic: true
    });
    World.add(world,wall)
})
})
verticals.forEach((row,rowIndex)=>{
    row.forEach((open,columnIndex)=>{
        if(open){
            return;
        }
        const wall = Bodies.rectangle(columnIndex * unitLength + unitLength , rowIndex * unitLength + unitLength / 2,unitLength,10,unitLength,{
            isStatic: true
        });
        World.add(world,wall)
    })
    })
    //Goal
    const goal = Bodies.rectangle(width - unitLength / 2,
        height - unitLength / 2,
        unitLength * 0.7,
        unitLength * 0.7,{
            isStatic: true
        }
        );

    World.add(world,goal)

//Ball
const ball = Bodies.circle(unitLength / 2,unitLength / 2 ,unitLength / 4)
World.add(world,ball)

document.addEventListener('keydown',ev=>{
    
})